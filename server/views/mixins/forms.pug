- const getInputName = (property) => `data[${property}]`
- const getInputId = (property) => `data_${property}`
- const getLengthCount = (err) => (err.message.match(/\d+/) && err.message.match(/\d+/)[0]) || ''
- const names = { statusId: 'status', executorId: 'executor', labelIds: 'labels' }

mixin formFor(entity = null)
  form&attributes(attributes)
    block

mixin input(entity, propertyName, translatedProperty, errors = {})
  - propertyErrors = _.get(errors, propertyName)
  - classLine = 'form-control' + (_.isEmpty(errors) ? '' : ' is-invalid')
  - inputId = getInputId(propertyName)
  .mb-3(class=(errors[propertyName] && 'has-danger'))
    label(
      for= inputId
    )= translatedProperty
    input(
      id= inputId
      name=getInputName(propertyName)
      class=classLine
      value=_.get(entity, propertyName, '')
    )&attributes(attributes)
    if !_.isEmpty(propertyErrors)
      .invalid-feedback= propertyErrors.map(({ message }) => message).join('. ')

mixin submit(form = null)
  input(class='btn btn-primary' type='submit' value=form)&attributes(attributes)

mixin textarea(entity, propertyName, errors = {})
  - propertyErrors = _.get(errors, propertyName)
  - classLine = 'form-control' + (!propertyErrors ? '' : ' is-invalid')
  - inputId = getInputId(propertyName)
  - name = getInputName(propertyName)
  .form-group(class=(errors[propertyName] && 'has-danger'))
    label(
      for= inputId
    )= t(`form.${propertyName}`)
    textarea(
      id= inputId
      name= name
      class=classLine
    )&attributes(attributes)= _.get(entity, propertyName, '')
    if !_.isEmpty(propertyErrors)
      .invalid-feedback= propertyErrors.map(({ message }) => message).join('. ')

mixin select(entity, propertyName, errors = {}, items, multiple = false)
  - propertyErrors = _.get(errors, propertyName)
  - classLine = 'form-control' + (!propertyErrors ? '' : ' is-invalid')
  - inputId = getInputId(propertyName)
  - name = getInputName(propertyName)
  - entityName = entity.constructor.name.toLowerCase()
  - selectedOptions = entity[propertyName] ? [entity[propertyName]].flat().map((item) => item.id ? Number(item.id) : Number(item)) : []
  .form-group(class="mb-3")
    label(for=inputId)= t(`views.${entityName}s.${propertyName in names ? names[propertyName] : propertyName}`)
    select.form-control(
      id= inputId,
      name=name,
      multiple=multiple
      class=classLine
    )
      if !multiple
          option
      each item in items
        - isSelect = _.includes(selectedOptions, item.id)
        option(value=item.id, selected= isSelect)= item.name || item.fullName()
    if !_.isEmpty(propertyErrors)
      .invalid-feedback= propertyErrors.map(({ message }) => message).join('. ')

mixin filterSelect(entity, propertyName, items, filterOptions)
  - classLine = 'form-control ml-2 mr-3 mb-2'
  - inputId = getInputId(propertyName)
  .form-group
    label(for=inputId)= t(`views.filters.${propertyName}`)
    select.form-control(
      id=inputId,
      name=propertyName,
      multiple=false
      class=classLine
    )
      option(selected= true)
      each item in items
        - isSelect = filterOptions[propertyName] == item.id
        option(value=item.id, selected= isSelect)= item.name || item.fullName()

mixin buttonTo(action, method)
  form(action=action, method="post")
    input(name="_method" type="hidden" value=method)
    input(type='submit')&attributes(attributes)

mixin checkbox(propertyName, filterOptions)
  - classLine = 'form-control form-check-input'
  - inputId = getInputId(propertyName)
  .form-group.form-check.mb-2
    label.form-check-label(for=inputId class='mx-2')= t(`views.filters.${propertyName}`)
    input.form-check-input(class=classLine id=inputId type='checkbox' name=propertyName checked=filterOptions[propertyName])